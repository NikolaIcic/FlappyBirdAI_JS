(()=>{"use strict";class s{constructor(){this.alive=!0,this.color=0,this.x=35,this.y=40,this.speed=0,this.score=0,this.ref=null,this.Bias=new Array(3),this.Weights=new Array(2),this.Bias[0]=new Array(4),this.Bias[1]=new Array(2),this.Weights[0]=new Array(8),this.Weights[1]=new Array(2);for(let s=0;s<8;s++)this.Weights[0][s]=2*Math.random()-1;for(let s=0;s<2;s++)this.Weights[1][s]=2*Math.random()-1}Jump(){this.speed=-.7}AI(s,t,e){this.Bias[0][0]=this.y/100,this.Bias[0][1]=(s-this.x)/100,this.Bias[0][2]=(t-this.y+4)/100,this.Bias[0][3]=(t+e-this.y-3)/100,this.Bias[1][0]=this.Bias[0][0]*this.Weights[0][0]+this.Bias[0][1]*this.Weights[0][1]+this.Bias[0][2]*this.Weights[0][2]+this.Bias[0][3]*this.Weights[0][3],this.Bias[1][1]=this.Bias[0][0]*this.Weights[0][4]+this.Bias[0][1]*this.Weights[0][5]+this.Bias[0][2]*this.Weights[0][6]+this.Bias[0][3]*this.Weights[0][7],this.Bias[2]=this.Bias[1][0]*this.Weights[1][0]+this.Bias[1][1]*this.Weights[1][1],this.Bias[2]>0&&(this.speed=-.7)}}class t{constructor(s){this.x=85,this.y=s,this.ref=null}}class e{constructor(t){this.Birds=[],this.Obstacles=[],this.currentObs=null,this.gameOn=!1,this.startGame=!0,this.canvas=t,this.Hole=25,this.AccelerationY=.016,this.SpeedX=.19,this.TopScore=0,this.Score=0,this.Generation=0,this.NumOfBirds=55,this.NumOfRandom=55,this.Birds.push(new s)}AddBird(){this.Birds.push(new s)}AddObstacle(){let s=new t(Math.floor(Math.random()*(100-this.Hole-13))+2),e=document.createElement("div");e.className="Obstacle",e.style.left=s.x+"%",this.canvas.appendChild(e),s.ref=e,this.Obstacles.push(s);let i=document.createElement("div");i.className="ObsPart",i.style.height=s.y+"vh";let h=document.createElement("div");h.className="ObsPart",h.style.height=100-s.y-this.Hole+"vh",h.style.marginTop=this.Hole+"vh",e.appendChild(i),e.appendChild(h),null==this.currentObs&&(this.currentObs=s)}CreateObstacles(){setInterval((()=>{this.gameOn&&this.AddObstacle()}),2e3)}CreateBirds(s){for(let t=0;t<s;t++)this.AddBird()}DrawBirds(){this.Birds.forEach((s=>{let t=document.createElement("div");0==s.color?t.className="Bird":1==s.color?t.className="BirdChampion":2==s.color?t.className="BirdChild":3==s.color?t.className="BirdMutation":4==s.color&&(t.className="BirdCombination"),t.style.top=s.y+"%",t.style.left=s.x+"%",this.canvas.appendChild(t),s.ref=t}))}Invalidate(){setInterval((()=>{this.gameOn&&(this.Birds.forEach((s=>{s.alive?(s.speed+=this.AccelerationY,s.y+=s.speed,s.ref.style="transform: rotate("+45*s.speed+"deg)",s.ref.style.top=s.y+"%",s.ref.style.left=s.x+"%"):s.x>0&&(s.x-=this.SpeedX,s.ref.style.left=s.x+"%",s.y<89&&(s.y+=.7,s.ref.style.top=s.y+"%"))})),this.Obstacles.forEach((s=>{s.x-=this.SpeedX,s.ref.style.left=s.x+"%"})))}),10)}Checkup(){setInterval((()=>{this.Birds.forEach((s=>{s.alive&&(s.y>=87||s.y<=5)&&(s.score=this.Score,s.alive=!1)})),null!=this.currentObs&&this.currentObs.x>=31&&this.currentObs.x<=41&&this.Birds.forEach((s=>{s.alive&&(s.y<=this.currentObs.y+5||s.y>=this.currentObs.y+this.Hole-3)&&(s.score=this.Score,s.alive=!1)})),this.Obstacles.forEach(((s,t)=>{s.x<=14&&(s.ref.remove(),this.Obstacles.shift())})),null!=this.currentObs&&this.currentObs.x<30&&(this.currentObs=this.Obstacles[1],this.Score++,document.getElementsByClassName("Score")[0].innerHTML="score:"+this.Score)}),1)}Gameover(){setInterval((()=>{let s=!0;for(let t=0;t<this.Birds.length;t++)if(this.Birds[t].alive){s=!1;break}s&&this.gameOn&&setTimeout((()=>{this.gameOn=!1,setTimeout((()=>{this.NewGame(!1)}),500)}),700)}),800)}NewGame(t){this.Birds[0].alive=!0,this.Birds[0].color=1,this.Birds[0].x=35,this.Birds[0].y=40,this.Birds[0].speed=0,this.Birds[0].score=0,this.Birds.forEach((s=>{if(s.score>this.TopScore){this.TopScore=s.score;for(let t=0;t<8;t++)this.Birds[0].Weights[0][t]=s.Weights[0][t];for(let t=0;t<2;t++)this.Birds[0].Weights[1][t]=s.Weights[1][t]}})),this.Birds.forEach((s=>{null!=s.ref&&s.ref.remove()})),this.Obstacles.forEach((s=>{null!=s.ref&&s.ref.remove()})),this.Birds.splice(1,this.Birds.length-1),this.Obstacles.splice(0,this.Obstacles.length),this.currentObs=null,this.startGame=t,this.Score=0,this.Generation++,document.getElementsByClassName("Info1")[0].innerHTML=`TopScore:${this.TopScore}<br>Generation:${this.Generation}`,document.getElementsByClassName("Score")[0].innerHTML="score:"+this.Score,this.startGame||(this.gameOn=!0),this.TopScore>=1&&(this.NumOfRandom=20);for(let t=0;t<this.NumOfBirds-this.NumOfRandom;t++){let t=new s;if(50*Math.random()>7){t.color=2;for(let s=0;s<8;s++)t.Weights[0][s]=this.Birds[0].Weights[0][s]+(4*Math.random()-2)/10;for(let s=0;s<2;s++)t.Weights[1][s]=this.Birds[0].Weights[1][s]+(4*Math.random()-2)/10}else if(50*Math.random()>25){t.color=4;for(let s=0;s<8;s++)30*Math.random()>25?t.Weights[0][s]=2*Math.random()-1:t.Weights[0][s]=this.Birds[0].Weights[0][s];for(let s=0;s<2;s++)20*Math.random()>14?t.Weights[1][s]=2*Math.random()-1:t.Weights[1][s]=this.Birds[0].Weights[1][s]}else t.color=3,t.Weights[0][Math.floor(8*Math.random())]=2*Math.random()-1;this.Birds.push(t)}this.CreateBirds(this.NumOfRandom),this.DrawBirds(this.canvas)}Jump(){this.Birds.forEach((s=>{s.Jump()}))}BirdAI(){setInterval((()=>{this.Birds.forEach((s=>{s.alive&&(null!=this.currentObs?s.AI(this.currentObs.x,this.currentObs.y,this.Hole):s.AI(90,25,this.Hole))}))}),10)}Test(){this.Birds.forEach((s=>{console.log(s)}))}}window.onload=()=>{const s=document.getElementById("main"),t=new e(s);t.DrawBirds(),t.CreateObstacles(),t.Invalidate(),t.Checkup(),t.Gameover(),t.BirdAI(),s.onclick=()=>{t.startGame&&!t.gameOn?(t.startGame=!1,t.gameOn=!0):t.Jump()}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,